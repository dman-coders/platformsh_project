<?php

/**
 * @file
 * Primary module hooks for platformsh_project module.
 */


function platformsh_project_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['node']['project'])) {
    // Possible since 9.3 https://www.drupal.org/project/drupal/issues/2570593
    $bundles['node']['project']['class'] = \Drupal\platformsh_project\Entity\Project::class;
  }
  if (isset($bundles['node']['user'])) {
    $bundles['node']['user']['class'] = \Drupal\platformsh_project\Entity\User::class;
  }
  if (isset($bundles['node']['organization'])) {
    $bundles['node']['organization']['class'] = \Drupal\platformsh_project\Entity\Organization::class;
  }
  if (isset($bundles['metric']['note'])) {
    $bundles['metric']['note']['class'] = \Drupal\platformsh_project\Entity\NoteMetric::class;
  }
  if (isset($bundles['metric']['ping'])) {
    $bundles['metric']['ping']['class'] = \Drupal\platformsh_project\Entity\PingMetric::class;
  }
}


/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 *
 * Synchronises a project entry with API info on first creation.
 * See also hook_ENTITY_TYPE_create - this may be what I mean to use sometimes.
 */
function platformsh_project_node_presave(Drupal\Node\Entity\Node $entity) {
  // Update from API if brand new
  if ($entity->getType() == 'project' && $entity->isNew()) {
    \Drupal::logger('platformsh_project')->notice("Creating a new project");
    $action = \Drupal::entityTypeManager()
      ->getStorage('action')
      ->load('platformsh_project_refresh_from_api_action');
    if ($action) {
      $action->execute([$entity]);
    }
  }
  // Ensure target entities exist if references to org or owner are set.
  $api_service = \Drupal::service('platformsh_api.fetcher');
  $referrees = [];
}
