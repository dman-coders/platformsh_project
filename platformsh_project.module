<?php

/**
 * @file
 * Primary module hooks for platformsh_project module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityTypeInterface as EntityTypeInterfaceAlias;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\platformsh_project\Entity\DrupalCacheMetric;
use Drupal\platformsh_project\Entity\MetricType;
use Drupal\platformsh_project\Entity\NoteMetric;
use Drupal\platformsh_project\Entity\Organization;
use Drupal\platformsh_project\Entity\PingMetric;
use Drupal\platformsh_project\Entity\Project;
use Drupal\platformsh_project\Entity\User;
use Symfony\Component\Yaml\Yaml;

/**
 * hook_entity_bundle_info()
 *
 * https://www.drupal.org/node/3191609
 * An alternative to declaring everything in yaml files.
 *
 * @param array $bundles
 *
 * @return array

 */
function platformsh_project_entity_bundle_info(): array {
  $bundles['metric']['pong']['label'] = t('A Pong!');
  $bundles['metric']['pong']['class'] = Drupal\platformsh_project\Entity\PingMetric::class;

  $bundles['metric']['note'] = [
    'label' => t('Note'),
    'description' => t("An arbitrary user-added note"),
    'class' =>  Drupal\platformsh_project\Entity\NoteMetric::class,
  ];

  $bundles['metric']['ping'] = [
    'label' => t('Ping'),
    'description' => t("Ping the respoonse from the domain"),
    'class' =>  Drupal\platformsh_project\Entity\PingMetric::class,
  ];

  $bundles['metric']['highsla'] = [
    'label' => t('HighSLA'),
    'description' => t("Checks if HighSLA monitoring is active"),
    'class' =>  Drupal\platformsh_project\Entity\HighSlaMetric::class,
  ];


  $bundles['metric']['drupalcache'] = [
    'label' => t('Drupal Cache'),
    'description' => t("Reviews the Drupal cache settings"),
    'class' =>  Drupal\platformsh_project\Entity\DrupalCacheMetric::class,
  ];

  $bundles['metric']['fastly'] = [
    'label' => t('Check Fastly status'),
    'class' =>  Drupal\platformsh_project\Entity\FastlyMetric::class,
  ];

  return $bundles;
}


/**
 * hook_entity_bundle_info_alter is how we attach a custom Class
 * to handle our entity definition.
 * That would otherwise be just a vanilla system-managed object.
 *
 * We still allow most of that methods and properties of a core
 * ContentEntityBase, as our classes inherit from that.
 *
 * @param array $bundles
 *
 * @return void
 */
function platformsh_project_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['node']['project'])) {
    // Possible since 9.3 https://www.drupal.org/project/drupal/issues/2570593
    $bundles['node']['project']['class'] = Project::class;
  }
  if (isset($bundles['node']['user'])) {
    $bundles['node']['user']['class'] = User::class;
  }
  if (isset($bundles['node']['organization'])) {
    $bundles['node']['organization']['class'] = Organization::class;
  }

  // Find all metric bundle classes, and make sure they are registered as expected.
  // TODO check if this is still relevant now that this is done in hook_entity_bundle_info()
  // getDefinitions doesn't work on for us if the classes are not annotated.

  if (false) {
    $entities = Drupal::entityTypeManager()->getDefinitions();
    foreach ($entities as $entity_id => $entity_definition) {
      if ($entity_definition->getBundleEntityType() == 'metric_type') {
        $bundles['metric'][$entity_definition->id()]['class'] = $entity_definition->getClass();
        $bundles['metric'][$entity_definition->id()]['label'] = $entity_definition->getLabel();
      }
    }
  }

}

/**
 * @implements hook_entity_type_alter()
 * @return void
 */
function xx_platformsh_project_entity_type_alter(&$entity_info): void {
  // Adjust the bundle definitions after the annotations have been read.
  $base_entity = $entity_info['metric'];
  /**
   * @var  $entity_definition Drupal\Core\Entity\ContentEntityTypeInterface
   */
  foreach ($entity_info as $entity_id => $entity_definition) {
    if ($entity_definition->getBundleEntityType() == 'metric_type') {
      // Clone all the useful values from the abstract `metric` class into the bundle.
      // Seems that programmatically defining bundle classes missed some settings.
      // THIS SHOULD NOT BE NECCESSARY once I find how to instantiate this correctly.
      foreach($base_entity->getLinkTemplates() as $key => $value) {
        $entity_definition->setLinkTemplate($key, $value);
      }
      foreach($base_entity->getHandlerClasses() as $key => $value) {
        $entity_definition->setHandlerClass($key, $value);
      }
    }
  }
}


/**
 * Update the fields that are attached to metrics
 *
 * It seems near impossible to manually and confidently
 * create and attach fields via code using FieldStorageConfig::create()
 * and the rest.
 * It seems that setting up our content types with baseFieldDefinitions()
 * is problematic, and base fields don't play well with FieldUI fields.
 *
 * Trying to add fields with
 * hook_entity_field_storage_info(), hook_entity_bundle_field_info()
 * May have been correct, but triggered a lot of site-killer errors
 * if mysterious things don't align correctly.
 * Incredibly fragile, opaque and broken.
 *
 * ALL the tutorials say to just export and use yamls for this, but this
 * doesn't scale well because we have to keep adding and maintaining yamls
 * for each metric bundle.
 *
 * So this is a hybrid.
 * Define the fields in yamls, but don't just install them.
 * Load the yamls as templates.
 * Tweak the template, then import the config.
 * Allow the field UI to work with them while it all gets set up.
 * Allow re-importing of these yamls to reset them
 *
 * We selectively grab yamls out of the /config/preinstall/
 * folder, then config-import them.
 */
function platformsh_project_update_fields() {

  // Obtain configuration from yaml files
  $config_folder = Drupal::service('extension.list.module')
      ->getPath('platformsh_project') . '/config/preinstall/';

  /*
      Drupal::configFactory()
        ->getEditable($local_config_id)
        ->setData($data)
        ->save(TRUE);
  */

  // Establish field storage for the per-bundle fields.

  // Yamls are a silly way to manage fields that should be getting declared by code in the classes.
  // So check the bundle classes and declare their fields via config code instead.
  // https://www.drupal.org/docs/create-custom-content-types-with-bundle-classes

  /**
   * @var Drupal\Core\Entity\EntityFieldManager $efm
   */
  $efm = \Drupal::service('entity_field.manager');
  $entity_type_id = 'metric';
  $bundle_id = 'metric';
  $base_fields = $efm->getFieldStorageDefinitions($entity_type_id, $bundle_id);
  // All fields defined for the bundle, including base fields.
  $type_fields = $efm->getFieldDefinitions($entity_type_id, $bundle_id);
  // The list of fields uniquely defined by the bundle.
  $bundle_fields = array_diff(array_keys($type_fields), array_keys($base_fields));
  foreach ($bundle_fields as $id => $field_name) {
    // The BundleFields are those defined by MyMetric->bundleFieldDefinitions()
    /**
     * @var $field_definition Drupal\Core\Field\FieldDefinition
     * Note: not identical with a Drupal\Core\Field\BaseFieldDefinition
     */
    $field_definition = $type_fields[$field_name];
    /**
     * @var $storage_definition FieldStorageDefinitionInterface
     * such as FieldStorageConfig
     */
    $storage_definition = FieldStorageConfig::create(values: [
      'entity_type' => 'metric',
      'field_name' => $field_name,
      'type' => $field_definition->getType(),
      'cardinality' => $field_definition->getSetting('cardinality') ? $field_definition->getSetting('cardinality') : 1,
    ])->save();

    \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition(
      $field_name,
      $entity_type_id,
      'platformsh_project',
      $storage_definition
    );
    \Drupal::messenger()
      ->addStatus(__FUNCTION__ . " Added custom field " . $field_name . " to the " . $bundle_id . " metric.");
  }


}

/**
 * Instead of using yamls to define the bundles,
 * define them based on the Classes.
 *
 * This function checks our list of registered bundles
 * that was lightly populated by hook_bundle_entity_info()
 * and ingests them as first class configuration entities
 * defining the various metric bundles.
 *
 * Internally-only, it's maybe possible for the system to
 * survive with only the hook_bundle_entity_info definitions,
 * as they go to the same places, but it seems that other
 * internal systems - the @links route generation specifically
 * relies on the entity type configuration info to be present.
 *
 * @return void
 */
function platformsh_project_update_bundles() {
  $entity_type_id = 'metric';
  $bundle_entity_type_id = 'metric_bundle';

  // Get the bundles.
  // This only gets already-registered bundles.
  $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo($entity_type_id);

  foreach ($bundles as $bundle_id => $bundle_config) {
    // Check if the bundle already exists.
    $existing_bundle = MetricType::load($bundle_id);

    \Drupal::messenger()
      ->addStatus(__FUNCTION__ . " Updating bundle $bundle_id .");

    if ($existing_bundle) {
      // Update the existing bundle.
      $existing_bundle->set('label', $bundle_config['label']);
      if (isset($bundle_config['description'])) {
        $existing_bundle->set('description', $bundle_config['description']);
      }
      $existing_bundle->save();
    }
    else {
      // Create a new bundle.
      $bundle = MetricType::create([
        'id' => $bundle_id,
        'label' => $bundle_config['label'],
        'entity_type' => $entity_type_id,
      ]);
      if (isset($bundle_config['description'])) {
        $bundle->set('description', $bundle_config['description']);
      }
      $bundle->save();
      // This save() will have the effect of creating the expected
      // platformsh.project.metric_type.{type}.yaml
      // config settings.
      \Drupal::messenger()
        ->addStatus(__FUNCTION__ . " Updated bundle definition for $bundle_id metric.");
    }

    // Surely this would be managed by $bundle->save() already?
    if (false) {
      // Need to invent the expected config entries.
      // Normally these are published as
      // platformsh.project.metric_type.{type}.yaml
      // but it's better to do it programatically.
      $local_config_id = 'platformsh_project.metric_type.' . $bundle_id;
      $config = Drupal::configFactory()->getEditable($local_config_id);
      $data = array_replace_recursive(
        $config->getRawData(),
        [
          'id' => $bundle_id,
          'label' => $bundle_id,
          'dependencies' => [
            'enforced' => [
              'module' => [
                'platformsh_project',
              ],
            ],
          ]
        ]
      );

      $config
        ->setData($data)
        ->save(TRUE);
      \Drupal::messenger()
        ->addStatus(__FUNCTION__ . " Updated bundle yaml  $local_config_id .");
    }
  }

}


/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 *
 * Synchronises a project entry with API info on first creation.
 * See also hook_ENTITY_TYPE_create - this may be what I mean to use sometimes.
 */
function platformsh_project_node_presave(Drupal\Node\Entity\Node $entity) {
  // Update from API if brand new
  if ($entity->getType() == 'project' && $entity->isNew()) {
    Drupal::logger('platformsh_project')->notice("Creating a new project");
    $action = Drupal::entityTypeManager()
      ->getStorage('action')
      ->load('platformsh_project_refresh_from_api_action');
    if ($action) {
      $action->execute([$entity]);
    }
  }
  // Ensure target entities exist if references to org or owner are set.
  $api_service = Drupal::service('platformsh_api.fetcher');
  $referrees = [];
}

/**
 * Delete all nodes of content types defined by this module,
 * the content type definitions,
 * and their field storage definitions.
 *
 * Implements hook_module_preuninstall().
 *
 * Note, it appears that `hook_module_preuninstall()`
 * cannot be placed in the {module}.install file.
 * It is .. uncertain when this gets invoked in practice.
 *
 */
function platformsh_project_module_preuninstall($module): void {
  // This gets called any time ANYTHING is uninstalled!
  // Danger. Maybe this is not the right place to be invoking this.
  // maybe it's hook_uninstall after all.
  if ('platformsh_project' !== $module) {
    return;
  }

  $content_type_names = ['project', 'user', 'organization'];

  Drupal::messenger()
    ->addStatus(__FUNCTION__ . " is deleting all content associated with its content types: " . implode(', ', $content_type_names));

  foreach ($content_type_names as $content_type_name) {
    $storage_handler = Drupal::entityTypeManager()
      ->getStorage('node');
    $nodes = $storage_handler->loadByProperties(['type' => $content_type_name]);
    $storage_handler->delete($nodes);
  }
  // To ensure that our content type definitions and field definitions
  // associated with this module go away also, add
  // `dependencies:enforced:module:platformsh_project`
  // To every `field.storage.node.*.yml` file in `config/install`
  // Otherwise they will remain behind as orphaned fields,
  // and conflict if you try to re-install this module.

  platformsh_project_delete_all_metrics();

}

function platformsh_project_delete_all_metrics() {
  Drupal::messenger()->addStatus(__FUNCTION__ . " is deleting all metrics.");
  $entity_type_names = ['metric'];
  foreach ($entity_type_names as $entity_type) {
    $storage_handler = Drupal::entityTypeManager()
      ->getStorage($entity_type);
    $entities = $storage_handler->loadByProperties([]);
    $storage_handler->delete($entities);
  }
  /*
  $entity_type_names = ['paragraph'];
  foreach ($entity_type_names as $entity_type) {
    $storage_handler = Drupal::entityTypeManager()
      ->getStorage($entity_type);
    $entities = $storage_handler->loadByProperties([]);
    $storage_handler->delete($entities);
  }
  */

}

/**
 * Implements hook_help().
 */
function platformsh_project_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Drop some dev notes in here
    case 'metric.add_unknown_metric_to_project':
      return 'DEV: add_unknown_metric_to_project';
    case 'metric.add_known_metric_to_project':
      return 'DEV: add_known_metric_to_project';
  }
  return 'DEV: ' . $route_name;
}


/**
 * Utility function for finding projects.
 *
 * @param $project_id
 *
 * @return null | \Drupal\node\Entity\Node
 */
function platformsh_project_get_project_by_project_id($project_id) {
  $nodes = Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadByProperties([
      'field_id' => $project_id,
    ]);
  if ($node = reset($nodes)) {
    return $node;
  }
  Drupal::messenger()
    ->addStatus(__FUNCTION__ . " failed to find a project with the ID " . $project_id);
  return NULL;

}

